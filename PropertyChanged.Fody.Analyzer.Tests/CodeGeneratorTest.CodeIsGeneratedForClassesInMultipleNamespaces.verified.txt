// PropertyChanged.g.cs
// <auto-generated/>
#nullable enable
#pragma warning disable CS0067
#pragma warning disable CS8019
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Runtime.CompilerServices;

partial class Class1 : INotifyPropertyChanged
{
    [GeneratedCode("PropertyChanged.Fody", "TEST")]
    public event PropertyChangedEventHandler? PropertyChanged;

    [GeneratedCode("PropertyChanged.Fody", "TEST"), DebuggerNonUserCode]
    protected void OnPropertyChanged([CallerMemberName] string? propertyName = null)
    {
        OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
    }

    [GeneratedCode("PropertyChanged.Fody", "TEST"), DebuggerNonUserCode]
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs eventArgs)
    {
        PropertyChanged?.Invoke(this, eventArgs);
    }
}

partial class Class2
{
    [GeneratedCode("PropertyChanged.Fody", "TEST")]
    public event PropertyChangedEventHandler? PropertyChanged;

    [GeneratedCode("PropertyChanged.Fody", "TEST"), DebuggerNonUserCode]
    protected void OnPropertyChanged([CallerMemberName] string? propertyName = null)
    {
        OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
    }

    [GeneratedCode("PropertyChanged.Fody", "TEST"), DebuggerNonUserCode]
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs eventArgs)
    {
        PropertyChanged?.Invoke(this, eventArgs);
    }
}

namespace Namespace1
{
    partial class Class1 : INotifyPropertyChanged
    {
        [GeneratedCode("PropertyChanged.Fody", "TEST")]
        public event PropertyChangedEventHandler? PropertyChanged;

        [GeneratedCode("PropertyChanged.Fody", "TEST"), DebuggerNonUserCode]
        protected void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
        }

        [GeneratedCode("PropertyChanged.Fody", "TEST"), DebuggerNonUserCode]
        protected virtual void OnPropertyChanged(PropertyChangedEventArgs eventArgs)
        {
            PropertyChanged?.Invoke(this, eventArgs);
        }
    }
}

namespace Namespace1
{
    partial class Class2
    {
        [GeneratedCode("PropertyChanged.Fody", "TEST")]
        public event PropertyChangedEventHandler? PropertyChanged;

        [GeneratedCode("PropertyChanged.Fody", "TEST"), DebuggerNonUserCode]
        protected void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
        }

        [GeneratedCode("PropertyChanged.Fody", "TEST"), DebuggerNonUserCode]
        protected virtual void OnPropertyChanged(PropertyChangedEventArgs eventArgs)
        {
            PropertyChanged?.Invoke(this, eventArgs);
        }
    }
}

namespace Namespace2
{
    partial class Class1 : INotifyPropertyChanged
    {
        [GeneratedCode("PropertyChanged.Fody", "TEST")]
        public event PropertyChangedEventHandler? PropertyChanged;

        [GeneratedCode("PropertyChanged.Fody", "TEST"), DebuggerNonUserCode]
        protected void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
        }

        [GeneratedCode("PropertyChanged.Fody", "TEST"), DebuggerNonUserCode]
        protected virtual void OnPropertyChanged(PropertyChangedEventArgs eventArgs)
        {
            PropertyChanged?.Invoke(this, eventArgs);
        }
    }
}

namespace Namespace2.Namespace3
{
    partial class Class2a
    {
        [GeneratedCode("PropertyChanged.Fody", "TEST")]
        public event PropertyChangedEventHandler? PropertyChanged;

        [GeneratedCode("PropertyChanged.Fody", "TEST"), DebuggerNonUserCode]
        protected void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
        }

        [GeneratedCode("PropertyChanged.Fody", "TEST"), DebuggerNonUserCode]
        protected virtual void OnPropertyChanged(PropertyChangedEventArgs eventArgs)
        {
            PropertyChanged?.Invoke(this, eventArgs);
        }
    }
}
