#nullable enable

using System.Collections.Immutable;
using System.ComponentModel;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

#pragma warning disable CS0067
static class SourceGeneratorEngine
{
    const string sourceFileHintName = "PropertyChanged.g.cs";

    public static void GenerateSource(SourceProductionContext context, Compilation compilation, Configuration configuration, ImmutableArray<ClassDeclarationSyntax> classes)
    {
        var cancellationToken = context.CancellationToken;

        if (configuration.IsDisabled)
        {
            context.AddSource(sourceFileHintName, @"// Source generator is disabled by configuration.");
            return;
        }

        var codeBuilder = new CodeBuilder();

        codeBuilder.Add("// <auto-generated/>");
        codeBuilder.Add("#nullable enable");
        codeBuilder.Add("#pragma warning disable CS0067");
        codeBuilder.Add("using System.ComponentModel;");

        foreach (var classesBySyntaxTree in classes.GroupBy(item => item.SyntaxTree))
        {
            var semanticModel = compilation.GetSemanticModel(classesBySyntaxTree.Key);

            foreach (var classDeclaration in classesBySyntaxTree)
            {
                if (semanticModel.GetDeclaredSymbol(classDeclaration, cancellationToken) is not ITypeSymbol typeSymbol)
                    continue;

                var namespaceName = typeSymbol.ContainingNamespace?.Name;

                using (codeBuilder.AddBlock("namespace {0}", namespaceName))
                {
                    using (codeBuilder.AddBlock($"{classDeclaration.Modifiers} class {typeSymbol.Name} : INotifyPropertyChanged"))
                    {
                        codeBuilder.Add("public event PropertyChangedEventHandler? PropertyChanged;");
                    }
                }
            }
        }

        context.AddSource(sourceFileHintName, codeBuilder.ToString());
    }
}
