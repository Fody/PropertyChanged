<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PropertyChanged</name>
    </assembly>
    <members>
        <member name="T:PropertyChanged.AddINotifyPropertyChangedInterfaceAttribute">
            <summary>
            Specifies that the class will be marked with <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            Note that all classes that implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> will have property notification
            injected irrespective of the use of this attribute.
            Raising an issue about "this attribute does not behave as expected" will result in a RTFM and the issue being closed.
            </summary>
        </member>
        <member name="T:PropertyChanged.AlsoNotifyForAttribute">
            <summary>
            Injects this property to be notified when a dependent property is set.
            </summary>
        </member>
        <member name="M:PropertyChanged.AlsoNotifyForAttribute.#ctor(System.String)">
            <summary>
             Initializes a new instance of <see cref="T:PropertyChanged.DependsOnAttribute"/>.
            </summary>
            <param name="property">A property that will be notified for.</param>
        </member>
        <member name="M:PropertyChanged.AlsoNotifyForAttribute.#ctor(System.String,System.String[])">
            <summary>
             Initializes a new instance of <see cref="T:PropertyChanged.DependsOnAttribute"/>.
            </summary>
            <param name="property">A property that will be notified for.</param>
            <param name="otherProperties">The properties that will be notified for.</param>
        </member>
        <member name="T:PropertyChanged.DependsOnAttribute">
            <summary>
            Injects this property to be notified when a dependent property is set.
            </summary>
        </member>
        <member name="M:PropertyChanged.DependsOnAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:PropertyChanged.DependsOnAttribute"/>.
            </summary>
            <param name="dependency">A property that the assigned property depends on.</param>
        </member>
        <member name="M:PropertyChanged.DependsOnAttribute.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of <see cref="T:PropertyChanged.DependsOnAttribute"/>.
            </summary>
            <param name="dependency">A property that the assigned property depends on.</param>
            <param name="otherDependencies">The properties that the assigned property depends on.</param>
        </member>
        <member name="T:PropertyChanged.DoNotCheckEqualityAttribute">
            <summary>
            Skip equality check before change notification
            </summary>
        </member>
        <member name="T:PropertyChanged.DoNotNotifyAttribute">
            <summary>
            Exclude a <see cref="T:System.Type"/> or property from notification.
            </summary>
        </member>
        <member name="T:PropertyChanged.DoNotSetChangedAttribute">
            <summary>
            Exclude a <see cref="T:System.Type"/> or property from IsChanged flagging.
            </summary>
        </member>
        <member name="T:PropertyChanged.FilterTypeAttribute">
            <summary>
            Defines filters on which types to include in the
            weaving process. These filters are Regex based and
            are matched against the Type.FullName
            </summary>
        </member>
        <member name="M:PropertyChanged.FilterTypeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:PropertyChanged.FilterTypeAttribute"/>.
            </summary>
            <param name="filter">The filter to apply to the types in this
            assembly. Matching is done by the Regex.IsMatch method using
            the Type.FullName as input for the Matching method.
            </param>
        </member>
    </members>
</doc>
